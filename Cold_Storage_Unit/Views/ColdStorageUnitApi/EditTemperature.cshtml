@model Cold_Storage_Unit.Models.Alertempareture
@{
    ViewBag.Title = "Manage Temperature Settings";
    var unitNames = (SelectList)ViewBag.UnitNames ?? new SelectList(Enumerable.Empty<string>());
    var categories = (SelectList)ViewBag.Categories ?? new SelectList(Enumerable.Empty<string>());
}
@using Cold_Storage_Unit.Models
@{
    var defs = ViewBag.AlertDefinitions as List<AlertDefinition> ?? new List<AlertDefinition>();
}
@{
    var highlightId = TempData["HighlightId"] as int?;
}
@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger">@TempData["ErrorMessage"]</div>
}
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success">@TempData["SuccessMessage"]</div>
}
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<div class="container my-4">
    <h2 class="mb-4">Temperature Settings</h2>
    <!-- Filter Form -->
    <form method="get" action="@Url.Action("EditTemperature", "ColdStorageUnitApi")" class="row g-3 align-items-center mb-4">
        <div class="col-md-4">
            <label for="unitName" class="form-label">Unit Name</label>
            @Html.DropDownList("unitName", unitNames, "All Units", new { @class = "form-select", @id = "unitName", @onchange = "this.form.submit();" })
        </div>
        <div class="col-md-4">
            <label for="category" class="form-label">Category</label>
            @Html.DropDownList("category", categories, "All Categories", new { @class = "form-select", @id = "category", @onchange = "this.form.submit();" })
        </div>
        <!-- Add New Button -->
        <div class="col-md-4 ">
            <button id="btnAddNew" type="button" class="btn btn-success mt-4" data-bs-toggle="modal" data-bs-target="#settingsModal">
                Add New Record
            </button>
        </div>
        <noscript>
            <div class="col-auto mt-3">
                <input type="submit" value="Filter" class="btn btn-primary" />
            </div>
        </noscript>
    </form>
    <!-- Data Table -->
    <div class="table-responsive">
        <table class="table table-bordered table-hover align-middle text-center" id="settingsTable">
            <thead class="table-light">
                <tr>
                    <th>Unit Name</th>
                    <th>Category</th>
                    <th>Threshold</th>
                    <th>Message</th>
                    <th>Enabled</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @if (ViewBag.AllSettings != null && ((List<Cold_Storage_Unit.Models.Alertempareture>)ViewBag.AllSettings).Count > 0)
                {
                    foreach (var item in (List<Cold_Storage_Unit.Models.Alertempareture>)ViewBag.AllSettings)
                    {
                        var rowClass = (highlightId.HasValue && item.Id == highlightId.Value) ? "table-warning" : "";
                        <tr class="@rowClass">
                            <td>@item.UnitName</td>
                            <td>@item.Category</td>
                            <td>@item.threshold</td>
                            <td>@item.message_display</td>
                            <td>@(item.enabled ? "Yes" : "No")</td>
                            <td>
                                <button class="btn btn-sm btn-warning me-2" onclick="openEditModal('@item.UnitName', '@item.Category')">Edit</button>

                                @using (Html.BeginForm("DeleteTemperature", "ColdStorageUnitApi", FormMethod.Post, new { onsubmit = "return confirm('Are you sure you want to delete this record?');", style = "display:inline;" }))
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.Hidden("unitName", item.UnitName)
                                    @Html.Hidden("category", item.Category)
                                    <button type="submit" class="btn btn-sm btn-danger">Delete</button>
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="6" class="text-center fst-italic">No records found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
    <!-- Modal -->
    <div class="modal fade" id="settingsModal" tabindex="-1" aria-labelledby="settingsModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="settingsModalLabel">
                        @(Model.Id > 0 ? "Edit Setting" : "Add New Setting")
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @using (Html.BeginForm("UpdateTemperature", "ColdStorageUnitApi", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
                    {
                        @Html.AntiForgeryToken()
                        @Html.HiddenFor(m => m.Id)

                        <div class="row g-3">
                            <!-- Unit Name -->
                            <div class="col-md-6">
                                <label class="form-label">Unit Name</label>
                                @if (Model.Id > 0)
                                {
                                    @Html.DropDownListFor(m => m.UnitName, (SelectList)ViewBag.UnitNames, new { @class = "form-select", @disabled = "disabled", @id = "UnitName" })
                                    @Html.HiddenFor(m => m.UnitName)
                                }
                                else
                                {
                                    var staticUnits = new List<SelectListItem>
                                                                                                    {
            new SelectListItem { Text = "Unit 1", Value = "Unit 1" },
            new SelectListItem { Text = "Unit 2", Value = "Unit 2" }
        };

                        @Html.DropDownListFor(m => m.UnitName, staticUnits, "Select Unit", new { @class = "form-select", @id = "UnitName", required = "required" })
                    }
                                @Html.ValidationMessageFor(m => m.UnitName, "", new { @class = "text-danger" })
                            </div>


                            <!-- Category -->
                            <div class="col-md-6">
                                <label class="form-label">Category</label>

                                @if (Model.Id > 0)
                                {
                                    // Edit mode: keep it disabled and pre-selected from DB
                                    var categoryAttributes = new Dictionary<string, object>
                                                                                                    {
                                    { "class", "form-select" },
                                    { "disabled", "disabled" },
                                    { "id", "Category" }
                                };
                                    @Html.DropDownListFor(m => m.Category, (SelectList)ViewBag.Categories, "Select Category", categoryAttributes)
                                    @Html.HiddenFor(m => m.Category)
                                }
                                else
                                {
                                    // Add New mode: use static hardcoded categories
                                    var staticCategories = new List<SelectListItem>
                                                                                    {
                    new SelectListItem { Text = "CO2", Value = "CO2" },
                    new SelectListItem { Text = "Humidity", Value = "Humidity" },
                    new SelectListItem { Text = "Temperature", Value = "Temperature" },
                    new SelectListItem { Text = "Ethylene", Value = "Ethylene" },
                    new SelectListItem { Text = "Fan", Value = "Fan" },
                    new SelectListItem { Text = "Compressor", Value = "Compressor" },
                    new SelectListItem { Text = "Sensor", Value = "Sensor" },
                    new SelectListItem { Text = "Data", Value = "Data" },
                    new SelectListItem { Text = "Door", Value = "Door" }
                };

                                    @Html.DropDownListFor(m => m.Category, staticCategories, "Select Category", new { @class = "form-select", @id = "Category" })
                                }
                            </div>
                            <!-- Threshold -->
                            <div class="col-md-6">
                                <label class="form-label">Threshold</label>
                                @Html.TextBoxFor(m => m.threshold, new { @class = "form-control", type = "number", step = "any", required = "required" })
                                @Html.ValidationMessageFor(m => m.threshold, "", new { @class = "text-danger" })
                            </div>

                            <!-- Enabled -->
                            <div class="col-md-6 form-check" style="padding-top: 30px;">
                                @Html.CheckBoxFor(m => m.enabled, new { @class = "form-check-input", id = "enabledCheck" })
                                <label class="form-check-label" for="enabledCheck">Enabled</label>
                            </div>

                            <!-- Condition Trigger -->
                            <div class="col-md-6">
                                <label class="form-label">Condition Trigger</label>
                                @Html.DropDownListFor(m => m.Condition_Trigger,
                                    new SelectList(defs, "ConditionTrigger", "ConditionTrigger", Model.Condition_Trigger),
                                    "Select Condition",
                                    new { @class = "form-select", required = "required", @id = "Condition_Trigger" })
                                @Html.ValidationMessageFor(m => m.Condition_Trigger, "", new { @class = "text-danger" })
                            </div>

                            <!-- Message Display -->
                            <div class="col-md-6">
                                <label class="form-label">Message Display</label>
                                @Html.DropDownListFor(m => m.message_display,
                                    new SelectList(defs, "MessageDisplay", "MessageDisplay", Model.message_display),
                                    "Select Message",
                                    new { @class = "form-select", @id = "message_display" })
                            </div>

                            <!-- Severity (mapped to enabled_sensitivity) -->
                            <div class="col-md-6">
                                <label class="form-label">Severity</label>
                                @Html.DropDownListFor(m => m.enabled_sensitivity,
       (IEnumerable<SelectListItem>)ViewBag.Severities,
       "Select Severity",
       new { @class = "form-select", required = "required" })

                            </div>

                            <!-- Remarks -->
                            <div class="col-md-6">
                                <label class="form-label">Remarks</label>
                                @Html.DropDownListFor(m => m.Remarks,
                                    new SelectList(defs, "Remarks", "Remarks", Model.Remarks),
                                    "Select Remarks",
                                    new { @class = "form-select", @id = "Remarks" })
                            </div>

                            <!-- Time In Minutes -->
                            <div class="col-md-6">
                                <label class="form-label">Time In Minutes</label>
                                @Html.TextBoxFor(m => m.TimeInMinutesFormatted, new { @class = "form-control", type = "time", step = "1" })
                            </div>
                        </div>

                        <div class="mt-4 text-end">
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Bootstrap & Script -->
@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

    <script>
        const alertDefinitions = @Html.Raw(Json.Encode(ViewBag.AllAlertDefinitions));

        const categoryAlertMap = {
            "Temperature": ["A3H", "A3L", "A7H", "A7L"],
            "Humidity": ["A2H", "A2L"],
            "CO2": ["A1H", "A1L"],
            "Ethylene": ["A4H", "A4L"],
            "Fan": ["A6H", "A6L"],
            "Compressor": ["A8"],
            "Sensor": ["A9"],
            "Data": ["A10"],
            "Door": ["A5H"]
        };

        function filterAlertFieldsByCategory(category) {
            const alertCodes = categoryAlertMap[category] || [];
            const filteredDefs = alertDefinitions.filter(def => alertCodes.includes(def.AlertName));

            const populateDropdown = (elementId, key) => {
                const dropdown = document.getElementById(elementId);
                if (!dropdown) return;

                dropdown.innerHTML = "<option value=''>Select</option>";

                const uniqueValues = [...new Set(filteredDefs.map(def => def[key]))];
                uniqueValues.forEach(val => {
                    const option = document.createElement("option");
                    option.value = val;
                    option.text = val;
                    dropdown.appendChild(option);
                });
            };

            populateDropdown("Condition_Trigger", "ConditionTrigger");
            populateDropdown("message_display", "MessageDisplay");
            populateDropdown("Remarks", "Remarks");
        }

        function updateConditionTriggerByMessage() {
            const messageSelect = document.getElementById("message_display");
            const conditionTriggerSelect = document.getElementById("Condition_Trigger");
            const thresholdInput = document.querySelector("[name='threshold']");

            if (!messageSelect || !conditionTriggerSelect || !thresholdInput) return;

            const selectedMessage = messageSelect.value;
            const enteredThreshold = thresholdInput.value.trim();

            const def = alertDefinitions.find(d => d.MessageDisplay === selectedMessage);

            conditionTriggerSelect.innerHTML = ""; // Clear existing options

            if (def && enteredThreshold) {
                // Replace numeric part of the original condition with entered threshold
                const customCondition = def.ConditionTrigger.replace(/([\d.]+)(\s*[a-zA-Z%°]*)/, `${enteredThreshold}$2`);

                const option = document.createElement("option");
                option.value = customCondition;
                option.text = customCondition;
                conditionTriggerSelect.appendChild(option);
            }
        }

        function attachModalEventHandlers() {
            const categoryDropdown = document.getElementById("Category");
            const messageDropdown = document.getElementById("message_display");
            const thresholdInput = document.querySelector("[name='threshold']");

            if (categoryDropdown) {
                categoryDropdown.addEventListener("change", function () {
                    filterAlertFieldsByCategory(this.value);
                });

                // Trigger once on load
                filterAlertFieldsByCategory(categoryDropdown.value);
            }

            if (messageDropdown) {
                messageDropdown.addEventListener("change", updateConditionTriggerByMessage);
            }

            if (thresholdInput) {
                thresholdInput.addEventListener("input", updateConditionTriggerByMessage);
            }

            // Trigger once on load
            updateConditionTriggerByMessage();
        }

        function openEditModal(unitName, category) {
            fetch(`@Url.Action("EditTemperature", "ColdStorageUnitApi")?unitName=${unitName}&category=${category}`)
                .then(response => response.text())
                .then(html => {
                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const modalContent = doc.querySelector('#settingsModal .modal-content');

                    if (modalContent) {
                        document.querySelector('#settingsModal .modal-content').innerHTML = modalContent.innerHTML;

                        const editModal = new bootstrap.Modal(document.getElementById('settingsModal'));
                        editModal.show();

                        // Reattach events after dynamic content load
                        setTimeout(attachModalEventHandlers, 200);
                    }
                })
                .catch(error => {
                    console.error('Error loading modal:', error);
                    alert('Failed to load edit form.');
                });
        }

        document.addEventListener("DOMContentLoaded", function () {
            attachModalEventHandlers();

            const modal = document.getElementById('settingsModal');
            if (modal) {
                modal.addEventListener('hidden.bs.modal', function () {
                    const modalTitle = document.getElementById('settingsModalLabel');
                    if (modalTitle && modalTitle.textContent.includes('Edit')) {
                        location.reload();
                    }
                });
            }
        });
    </script>
}

